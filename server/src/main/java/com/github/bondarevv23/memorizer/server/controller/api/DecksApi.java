/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.bondarevv23.memorizer.server.controller.api;

import com.github.bondarevv23.memorizer.server.model.generated.CardDTO;
import com.github.bondarevv23.memorizer.server.model.generated.DeckDTO;
import com.github.bondarevv23.memorizer.server.model.generated.DeckRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Controller
@Tag(name = "decks", description = "the decks API")
public interface DecksApi {

    /**
     * POST /decks
     * create new deck
     *
     * @param deckRequest  (required)
     * @return new deck successfully created (status code 200)
     *         or invalid deck request passed (status code 400)
     *         or owner of deck doesn&#39;t exist (status code 404)
     */
    @Operation(
        operationId = "addNewDeck",
        description = "create new deck",
        tags = { "decks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "new deck successfully created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeckDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "invalid deck request passed"),
            @ApiResponse(responseCode = "404", description = "owner of deck doesn't exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/decks",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<DeckDTO> addNewDeck(
        @Parameter(name = "DeckRequest", description = "", required = true) @Valid @RequestBody DeckRequest deckRequest
    );


    /**
     * DELETE /decks/{id}
     * delete deck by id
     *
     * @param id ID of deck to fetch (required)
     * @return deck has successfully deleted (status code 200)
     *         or there is no deck with this id (status code 404)
     */
    @Operation(
        operationId = "deleteDeckById",
        description = "delete deck by id",
        tags = { "decks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "deck has successfully deleted"),
            @ApiResponse(responseCode = "404", description = "there is no deck with this id")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/decks/{id}"
    )
    ResponseEntity<Void> deleteDeckById(
        @Parameter(name = "id", description = "ID of deck to fetch", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * GET /decks/{id}/cards
     * get all cards from deck
     *
     * @param id ID of deck to fetch (required)
     * @return cards have returned successfully (status code 200)
     *         or deck with this id doesn&#39;t exist (status code 404)
     */
    @Operation(
        operationId = "getCardsFromDeck",
        description = "get all cards from deck",
        tags = { "decks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "cards have returned successfully", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CardDTO.class)))
            }),
            @ApiResponse(responseCode = "404", description = "deck with this id doesn't exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decks/{id}/cards",
        produces = { "application/json" }
    )
    ResponseEntity<List<CardDTO>> getCardsFromDeck(
        @Parameter(name = "id", description = "ID of deck to fetch", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * GET /decks/{id}
     * get deck by id
     *
     * @param id ID of deck to fetch (required)
     * @return deck has successfully returned (status code 200)
     *         or unknown deck id (status code 404)
     */
    @Operation(
        operationId = "getDeckById",
        description = "get deck by id",
        tags = { "decks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "deck has successfully returned", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = DeckDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "unknown deck id")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decks/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<DeckDTO> getDeckById(
        @Parameter(name = "id", description = "ID of deck to fetch", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * GET /decks/{id}/card
     * get random card from deck
     *
     * @param id ID of deck to fetch (required)
     * @return card has returned successfully (status code 200)
     *         or deck with this id doesn&#39;t exist (status code 404)
     *         or deck is empty (status code 409)
     */
    @Operation(
        operationId = "getRandomCardFromDeck",
        description = "get random card from deck",
        tags = { "decks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "card has returned successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CardDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "deck with this id doesn't exist"),
            @ApiResponse(responseCode = "409", description = "deck is empty")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/decks/{id}/card",
        produces = { "application/json" }
    )
    ResponseEntity<CardDTO> getRandomCardFromDeck(
        @Parameter(name = "id", description = "ID of deck to fetch", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * PUT /decks/{id}
     * update deck by id
     *
     * @param id ID of deck to fetch (required)
     * @param deckRequest  (required)
     * @return deck have successfully updated (status code 201)
     *         or deck with this id doesn&#39;t exist (status code 404)
     *         or invalid deckRequest passed (status code 400)
     */
    @Operation(
        operationId = "updateDeckById",
        description = "update deck by id",
        tags = { "decks" },
        responses = {
            @ApiResponse(responseCode = "201", description = "deck have successfully updated"),
            @ApiResponse(responseCode = "404", description = "deck with this id doesn't exist"),
            @ApiResponse(responseCode = "400", description = "invalid deckRequest passed")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/decks/{id}",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateDeckById(
        @Parameter(name = "id", description = "ID of deck to fetch", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "DeckRequest", description = "", required = true) @Valid @RequestBody DeckRequest deckRequest
    );

}
