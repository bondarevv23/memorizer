/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.bondarevv23.memorizer.server.controller.api;

import com.github.bondarevv23.memorizer.server.model.generated.CardDTO;
import com.github.bondarevv23.memorizer.server.model.generated.CardRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Controller
@Tag(name = "cards", description = "the cards API")
public interface CardsApi {

    /**
     * POST /cards
     * create new card
     *
     * @param cardRequest  (required)
     * @return card has added successfully (status code 200)
     *         or invalid card request passed (status code 400)
     *         or wrong deckId passed (status code 404)
     */
    @Operation(
        operationId = "addNewCard",
        description = "create new card",
        tags = { "cards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "card has added successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CardDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "invalid card request passed"),
            @ApiResponse(responseCode = "404", description = "wrong deckId passed")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cards",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CardDTO> addNewCard(
        @Parameter(name = "CardRequest", description = "", required = true) @Valid @RequestBody CardRequest cardRequest
    );


    /**
     * DELETE /cards/{id}
     * delete card by id
     *
     * @param id  (required)
     * @return card has deleted successfully (status code 200)
     *         or card with this id doesn&#39;t exist (status code 404)
     */
    @Operation(
        operationId = "deleteCardById",
        description = "delete card by id",
        tags = { "cards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "card has deleted successfully"),
            @ApiResponse(responseCode = "404", description = "card with this id doesn't exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/cards/{id}"
    )
    ResponseEntity<Void> deleteCardById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * GET /cards/{id}
     * get card by id
     *
     * @param id  (required)
     * @return card has returned successfully (status code 200)
     *         or card with this id doesn&#39;t exist (status code 404)
     */
    @Operation(
        operationId = "getCardById",
        description = "get card by id",
        tags = { "cards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "card has returned successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CardDTO.class))
            }),
            @ApiResponse(responseCode = "404", description = "card with this id doesn't exist")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cards/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<CardDTO> getCardById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    );


    /**
     * PUT /cards/{id}
     * update card by id
     *
     * @param id  (required)
     * @param cardRequest  (required)
     * @return card has successfully updated (status code 200)
     *         or unknown card id (status code 404)
     *         or invalid card request data passed (status code 400)
     */
    @Operation(
        operationId = "updateCardById",
        description = "update card by id",
        tags = { "cards" },
        responses = {
            @ApiResponse(responseCode = "200", description = "card has successfully updated"),
            @ApiResponse(responseCode = "404", description = "unknown card id"),
            @ApiResponse(responseCode = "400", description = "invalid card request data passed")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/cards/{id}",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateCardById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "CardRequest", description = "", required = true) @Valid @RequestBody CardRequest cardRequest
    );

}
